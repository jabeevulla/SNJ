package com.snj.websales.main;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.apache.cordova.DroidGap;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.view.Menu;
import android.view.MenuItem;

public class MainActivity extends DroidGap {

	public enum AppStart {
		FIRST_TIME, FIRST_TIME_VERSION, NORMAL;
	}

	private Context context;
	private SharedPreferences sharedPreferences;

	/**
	 * The app version code (not the version name!) that was used on the last
	 * start of the app.
	 */
	private static final String LAST_APP_VERSION = "last_app_version";

	/**
	 * Caches the result of {@link #checkAppStart()}. To allow idempotent method
	 * calls.
	 */
	private static AppStart appStart = null;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// SharedPreferences prefs =
		// PreferenceManager.getDefaultSharedPreferences(getBaseContext());
		//
		// boolean previouslyStarted = prefs.getBoolean(getString(R.string.pr),
		// defValue);

		context = this;
		sharedPreferences = PreferenceManager
				.getDefaultSharedPreferences(context);

		switch (checkAppStart()) {
		case NORMAL:
			// We don't want to get on the user's nerves

			try {
				String pName = this.getClass().getPackage().getName();
				this.copy("Databases.db", "/data/data/" + pName + "/databases/");
			} catch (IOException e) {
				e.printStackTrace();
			}

			super.loadUrl("file:///android_asset/www/index.html");
			break;
		case FIRST_TIME_VERSION:
			// TODO show what's new
			break;
		case FIRST_TIME:
			// TODO show a tutorial
			
			try {
				String pName = this.getClass().getPackage().getName();
				this.copy("Databases.db", "/data/data/" + pName + "/databases/");
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			super.loadUrl("file:///android_asset/www/first_lunch.html");
			break;
		default:
			break;
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	/**
	 * Finds out started for the first time (ever or in the current version).
	 * 
	 * @return the type of app start
	 */
	public AppStart checkAppStart() {
		if (appStart == null) {
			PackageInfo pInfo;
			try {
				pInfo = context.getPackageManager().getPackageInfo(
						context.getPackageName(), 0);
				int lastVersionCode = sharedPreferences.getInt(
						LAST_APP_VERSION, -1);
				// String versionName = pInfo.versionName;
				int currentVersionCode = pInfo.versionCode;
				appStart = checkAppStart(currentVersionCode, lastVersionCode);
				// Update version in preferences
				sharedPreferences.edit()
						.putInt(LAST_APP_VERSION, currentVersionCode).commit();
			} catch (NameNotFoundException e) {
				// Log.w(Constants.LOG,
				// "Unable to determine current app version from pacakge manager. Defenisvely assuming normal app start.");
			}
		}
		return appStart;
	}

	public AppStart checkAppStart(int currentVersionCode, int lastVersionCode) {
		if (lastVersionCode == -1) {
			return AppStart.FIRST_TIME;
		} else if (lastVersionCode < currentVersionCode) {
			return AppStart.FIRST_TIME_VERSION;
		} else if (lastVersionCode > currentVersionCode) {
			// Log.w(Constants.LOG, "Current version code (" +
			// currentVersionCode
			// + ") is less then the one recognized on last startup ("
			// + lastVersionCode
			// + "). Defenisvely assuming normal app start.");
			return AppStart.NORMAL;
		} else {
			return AppStart.NORMAL;
		}
	}
	
	void copy(String file, String folder) throws IOException {
    	File CheckDirectory;
    	CheckDirectory = new File(folder);
    	if (!CheckDirectory.exists())
    	{ 
    		CheckDirectory.mkdir();
    	}

    	InputStream in = getApplicationContext().getAssets().open(file);
    	OutputStream out = new FileOutputStream(folder+file);

    	// Transfer bytes from in to out
    	byte[] buf = new byte[1024];
    	int len; while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
    	in.close(); out.close();
    
    }
}
